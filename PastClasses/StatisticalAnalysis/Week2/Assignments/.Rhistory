plot(oneTrajectory, ylim=c(-1000,1000),type="l")
lines(c(0,nFlips),c(0,0))
```
nFlips<-1000000;
##set.seed(12345)
Flips<-(rbinom(nFlips,1,.5)-.5)*2
```
How much do you expect the trajectory of wealth to deviate from zero
I expect that the trajectory can deviate far from zero, but will     eventually approach zero as the sample size increases.
How long do you expect it to stay on one side above or below zero?
After 4,000 flips
```{r}
oneTrajectory<-cumsum(Flips)
plot(oneTrajectory, ylim=c(-2000,2000),type="l")
lines(c(0,nFlips),c(0,0))
nFlips<-1000000;
##set.seed(12345)
Flips<-(rbinom(nFlips,1,.5)-.5)*2
```
How much do you expect the trajectory of wealth to deviate from zero
I expect that the trajectory can deviate far from zero, but will     eventually approach zero as the sample size increases.
How long do you expect it to stay on one side above or below zero?
After 4,000 flips
```{r}
oneTrajectory<-cumsum(Flips)
plot(oneTrajectory, ylim=c(-2000,2000),type="l")
lines(c(0,nFlips),c(0,0))
dataPath <- "C:/Users/JohntheGreat/Downloads/statistics_01_data/"
df <- read.table(paste0(dataPath, 'sample.csv'), header=TRUE)
sdX <- 1
sdY <- 1
cXY <- .67
a <- .75
result <- data.frame(sdX=sdX, sdY=sdY, cXY=cXY, a=a)
write.table(result, file = paste0(dataPath, 'result.csv'), row.names = F)
dataPath <- "C:/Users/JohntheGreat/Downloads/statistics_01_data/"
> df <- read.table(paste0(dataPath, 'sample.csv'), header=TRUE)
> sdX <- 1
> sdY <- 1
> cXY <- .67
> a <- .75
> result <- data.frame(sdX=sdX, sdY=sdY, cXY=cXY, a=a)
> write.table(result, file = paste0(dataPath, 'result.csv'), row.names = F)
dataPath <- "C:/Users/JohntheGreat/Downloads/statistics_01_data/"
df <- read.table(paste0(dataPath, 'sample.csv'), header=TRUE)
sdX <- 1
sdY <- 1
cXY <- .67
a <- .75
result <- data.frame(sdX=sdX, sdY=sdY, cXY=cXY, a=a)
write.table(result, file = paste0(dataPath, 'result.csv'), row.names = F)
dataPath <- "C:/Users/JohntheGreat/Downloads/statistics_01_data/"
df <- read.table(paste0(dataPath, 'sample.csv'), header=TRUE)
head(df)
head(result)
head(df)
length(df$x)
sd(df$x)
sd(df$y)
cov(df$x, df$y)
cov(df$y, df$x)
dataPath <- "C:/Users/JohntheGreat/Downloads/statistics_01_data/"
df <- read.table(paste0(dataPath, 'sample.csv'), header=TRUE)
sdX <- sd(df$x)
sdY <- sd(df$y)
cXY <- cov(df$x, df$y)
a <- .578713
result <- data.frame(sdX=sdX, sdY=sdY, cXY=cXY, a=a)
write.table(result, file = paste0(dataPath, 'result.csv'), row.names = F)
print(result)
Trajectories2000by500<-t(apply(matrix(Flips,ncol=500),1,cumsum))
dim(Trajectories2000by500)
(probability.less.than.5<-sum(abs(Trajectories2000by500[,500])<5)/2000)
(probability.greater.than.25<-sum(abs(Trajectories2000by500[,500])>=25)/2000)
timeAbove<-apply(Trajectories2000by500,1,function(z) sum(z>0))
hist(timeAbove)
timeAbove<-apply(Trajectories2000by500,1,function(z) sum(z>0))
hist(timeAbove,20)
timeAbove<-apply(Trajectories2000by500,1,function(z) sum(z>0))
hist(timeAbove,200)
set.seed(15)
Sample<-runif(1000,0,1)
head(Sample)
tail(Sample)
str(Sample)
library(random)
install.packages(random)
library(random)
1-pbinom(35)
1-pbinom(35, 100)
1-pbinom(35, 100, .3)
ppois(9,6)
1-ppois(9,6)
ppois(9,6, lower.tail = F)
pnbinom(35, 40, .53, lower.tail = FALSE)
pnbinom(35, 40, .53)
1-pbinom(35, 100, .3)
rnorm(500, 0, sd = 1.5)
set.seed(8402)
rnorm(500, 0, sd = 1.5)
head(rnorm(500, 0, sd = 1.5))
eps <- rnorm(500, mean = 0, sd = 1.5)
head(eps)
set.seed(8402)
eps <- rnorm(500, mean = 0, sd = 1.5)
head(eps)
eps <- rnorm(500, mean = 0, sd = 1.5)
head(eps)
set.seed(8402)
eps <- rnorm(500, mean = 0, sd = 1.5)
head(eps)
set.seed(8402)
Model1 <- rnorm(500, 3, 2.5)
head(Model1)
set.seed(8402)
X1 <- rnorm(500, 3, 2.5)
y1 <- a*X1 B +eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
set.seed(8402)
X1 <- rnorm(500, 3, 2.5)
Y1 <- a*X1 B +eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
set.seed(8402)
X1 <- rnorm(500, 3, 2.5)
Y1 <- a*X1 + b +eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
set.seed(8402)
eps <- rnorm(500, mean = 0, sd = 1.5)
head(eps)
set.seed(8402)
X1 <- rnorm(500, 3, 2.5)
Y1 <- a*X1 + b +eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
set.seed(8402)
eps <- rnorm(500, mean = 0, sd = 1.5)
head(eps)
set.seed(8402)
X1 <- rnorm(500, 3, 2.5)
Y1 <- a*X1 + b + eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
a <- 1
b <- 2.5
set.seed(8402)
eps <- rnorm(500, mean = 0, sd = 1.5)
head(eps)
set.seed(8402)
X1 <- rnorm(500, 3, 2.5)
Y1 <- a*X1 + b + eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
plot(Model1$X,Model1$Y)
set.seed(2048)
X1 <- rnorm(500, 3, 2.5)
Y1 <- a*X1 + b + eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
plot(Model1$X,Model1$Y)
set.seed(8402)
X1 <- rexp(500, 0.5)
Y1 <- a*X1 + b + eps
Model1 <- as.data.frame(cbind(Y = Y1, X = X1))
head(Model1)
plot(Model1$X,Model1$Y)
library(random)
install.packages(random)
library(random)
install.packages(random)
library(random)
install.packages(random)
library(random)
install.packages("random")
library(random)
set.seed(15)
Sample<-runif(1000,0,1)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
set.seed(15)
Sample<-runif(1000,0,1)
library(random)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE
)
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
set.seed(15)
Sample<-runif(1000,0,1)
head(Sample)
library(random)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
suppressMessages(library(compositions))
set.seed(15)
Sample<-runif(1000,0,1)
library(random)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
suppressMessages(library(compositions))
install.packages("compositions")
library(compositions)
suppressMessages(library(compositions))
bin2dec<-function(Bin.Seq){
unbinary(paste(Bin.Seq,collapse=""))
}
bin2dec(c(1,1,1,1,1,0))
paste(Bin.Seq,collapse="")
Binary.matrix<-matrix(dataFromRandom,ncol=10)
Binary.matrix<-matrix(dataFromRandom,ncol=10)
head(Binary.matrix)
Decimal.Sample<-apply(Binary.matrix,1,bin2dec)/2^10
Decimal.Sample
Sample.histogram<-hist(Sample)
Sample.histogram
(Sample.histogram.mean<-mean(Sample.histogram$density))
(Sample.histogram.sd<-sd(Sample.histogram$density))
plot(Sample.histogram,freq=FALSE)
abline(h=Sample.histogram.mean)
abline(h=Sample.histogram.mean+1.96*Sample.histogram.sd,col="red",lty=2)
abline(h=Sample.histogram.mean-1.96*Sample.histogram.sd,col="red",lty=2)
(Sample.histogram.sd<-sd(Sample.histogram$density))
head(Sample, 100)
summary(Sample)
Decimal.Sample
Sample.histogram<-hist(Decimal.Sample)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
set.seed(15)
library(random)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
library(random)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
library(random)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
head(dataFromRandom)
suppressMessages(library(compositions))
bin2dec<-function(Bin.Seq){
unbinary(paste(Bin.Seq,collapse=""))
}
bin2dec(c(1,1,1,1,1,0))
Binary.matrix<-matrix(dataFromRandom,ncol=10)
head(Binary.matrix)
Decimal.Sample<-apply(Binary.matrix,1,bin2dec)/2^10
Decimal.Sample
Sample.histogram<-hist(Decimal.Sample)
Sample.histogram
(Sample.histogram.mean<-mean(Sample.histogram$density))
(Sample.histogram.sd<-sd(Sample.histogram$density))
plot(Sample.histogram,freq=FALSE)
abline(h=Sample.histogram.mean)
abline(h=Sample.histogram.mean+1.96*Sample.histogram.sd,col="red",lty=2)
abline(h=Sample.histogram.mean-1.96*Sample.histogram.sd,col="red",lty=2)
(Sample.mean<-mean(Sample))
(Sample.variance<-var(Sample))
summary(Sample)
D.Sample.histogram<-hist(Decimal.Sample)
D.Sample.histogram
(D.Sample.histogram.mean<-mean(D.Sample.histogram$density))
(D.Sample.histogram.sd<-sd(D.Sample.histogram$density))
plot(D.Sample.histogram,freq=FALSE)
abline(h=D.Sample.histogram.mean)
abline(h=D.Sample.histogram.mean+1.96*D.Sample.histogram.sd,col="red",lty=2)
abline(h=D.Sample.histogram.mean-1.96*D.Sample.histogram.sd,col="red",lty=2)
plot(D.Sample.histogram,freq=FALSE)
D.Sample.histogram<-hist(Decimal.Sample)
D.Sample.histogram
(D.Sample.histogram.mean<-mean(D.Sample.histogram$density))
(D.Sample.histogram.sd<-sd(D.Sample.histogram$density))
plot(D.Sample.histogram,freq=FALSE)
abline(h=D.Sample.histogram.mean)
abline(h=D.Sample.histogram.mean+1.96*D.Sample.histogram.sd,col="red",lty=2)
abline(h=D.Sample.histogram.mean-1.96*D.Sample.histogram.sd,col="red",lty=2)
(D.Sample.histogram.mean<-mean(D.Sample.histogram$density))
(Sample.mean<-mean(Sample))
(Sample.variance<-var(Sample))
(D.Sample.mean<-mean(Decimal.Sample))
(D.Sample.variance<-var(Decimal.Sample))
summary(Decimal.Sample)
install.packages("randtests")
library(randtests)
turning.point.test(Decimal.Sample)
dataFromRandom.plusminus1<-(dataFromRandom-.5)*2
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
plot(seq(from=-3,to=3,by=.05),erfc(seq(from=-3,to=3,by=.05)),type="l",xlab="x",ylab="erfc(x")
erfc(abs(sum(dataFromRandom.plusminus1)/sqrt(2*nFlips)))
plot(erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50)),ylab="P-values of 20 runs")
sum(erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50))<=.01)
datapath<-"C:/Users/JohntheGreat/Downloads/documents%2FMScA Statistical Analysis 31007%2FMScA 31007 Lecture 2%2FScratchOffMonteCarlo (1).rda"
load(file=paste(datapath,'ScratchOffMonteCarlo.rda',sep='/')
load(file=paste(datapath,'ScratchOffMonteCarlo.rda',sep='/'))
load(file=paste(datapath,'ScratchOffMonteCarlo.rda',sep='/'))
load("C:/Users/JohntheGreat/Downloads/documents%2FMScA Statistical Analysis 31007%2FMScA 31007 Lecture 2%2FScratchOffMonteCarlo (3).rda")
load(file=paste(datapath,'ScratchOffMonteCarlo.rda',sep='/'))
datapath<-"C:/Users/JohntheGreat/Downloads/documents%2FMScA Statistical Analysis 31007%2FMScA 31007 Lecture 2%2FScratchOffMonteCarlo (1).rda/"
load(file=paste(datapath,'ScratchOffMonteCarlo.rda',sep='/'))
load("C:/Users/JohntheGreat/Downloads/documents%2FMScA Statistical Analysis 31007%2FMScA 31007 Lecture 2%2FScratchOffMonteCarlo (1).rda")
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
nSample <- 100
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
nSample <- 100
my.seed <- 555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
nSample <- 1000
my.seed <- 555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
nSample <- 10000
my.seed <- 555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
nSample <- 15000
my.seed <- 555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
nSample <- 20000
my.seed <- 556
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
nSample <- 25000
my.seed <- 5555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
nSample <- 30000
my.seed <- 5555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
nSample <- 15000
my.seed <- 5555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
```
ScratchOffMonteCarlo(xy)
nSample <- 18000
my.seed <- 5555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
nSample <- 20000
my.seed <- 5555
set.seed(my.seed)
xy<-runif(2*nSample,0,100)
xy<-matrix(xy,ncol=2)
head(xy)
ScratchOffMonteCarlo(xy)
install.packages("randtoolbox")
library(randtoolbox)
my.seed<-10
set.seed(my.seed)
nSample<-10
xy<-sobol(nSample,dim=2,init=T)*100
xy
nSample<-800
xy<-sobol(nSample,dim=2,init=T,scrambling = T,seed=my.seed)*100
plot(xy)
ScratchOffMonteCarlo(xy)
my.seed<-6565
nSample<-5000
xy<-sobol(nSample,dim=2,init=T,scrambling = T,seed=my.seed)*100
plot(xy)
ScratchOffMonteCarlo(xy
)
my.seed<-6565
nSample<-15000
xy<-sobol(nSample,dim=2,init=T,scrambling = T,seed=my.seed)*100
plot(xy)
ScratchOffMonteCarlo(xy)
my.seed<-6565
nSample<-13000
xy<-sobol(nSample,dim=2,init=T,scrambling = T,seed=my.seed)*100
plot(xy)
ScratchOffMonteCarlo(xy)
my.seed<-123
nSample<-13000
xy<-sobol(nSample,dim=2,init=T,scrambling = T,seed=my.seed)*100
plot(xy)
ScratchOffMonteCarlo(xy)
install.packages("jsonlite")
library(jsonlite)
bbk.ratio.histogram<-hist(bbk.ratio)
bbk.ratio.histogram
setwd("C:/Users/JohntheGreat/Documents/MSCA/StatisticalAnalysis/Week2/Assignments")
ratio <- read.csv(file = "ArrietaRatio.csv", header = F)
bbk.ratio <- ratio$V3
head(bbk.ratio)
bbk.ratio.histogram<-hist(bbk.ratio)
bbk.ratio.histogram
(bbk.ratio.histogram.mean<-mean(bbk.ratio.histogram$density))
(bbk.ratio.histogram.sd<-sd(bbk.ratio.histogram$density))
##plot the histogram and the mean and CI
plot(bbk.ratio.histogram,freq=FALSE)
abline(h=bbk.ratio.histogram.mean)
abline(h=bbk.ratio.histogram.mean+1.96*bbk.ratio.histogram.sd,col="red",lty=2)
abline(h=bbk.ratio.histogram.mean-1.96*bbk.ratio.histogram.sd,col="red",lty=2)
(bbk.ratio.mean<-mean(bbk.ratio))
(bbk.ratio.variance<-var(bbk.ratio))
summary(bbk.ratio)
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
erf(5)
erf(.5)
erfc(.5)
dataFromRandom.plusminus1
(dataFromRandom.plusminus1)/sqrt(2*nFlips)
sum(dataFromRandom.plusminus1)/sqrt(2*nFlips)
abs(sum(dataFromRandom.plusminus1)/sqrt(2*nFlips))
erfc(abs(sum(dataFromRandom.plusminus1)/sqrt(2*nFlips)))
plot(erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50)),ylab="P-values of 20 runs")
sum(erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50))<=.01)
library(randtests)
turning.point.test(bbk.ratio)
binary(5)
library(compositions)
binary(50)
bbk.bin <- binary(bbk.ratio)
head(bbk.bin)
tail(bbk.bin)
str(bbk.bin)
bbk.bin
head(bbk.ratio)
apply(bbk.ratio,*100)
bbk.ratio * 100
bbk.ratio.100 <- bbk.ratio * 100
binary(bbk.ratio.100)
bbk.bin <- binary(bbk.ratio * 100)
bbk.bin
paste(bbk.bin, collapse = "")
as.matrix(paste(bbk.bin, collapse = "")
)
as.vector(paste(bbk.bin, collapse = ""))
strtoi(0101010101010)
strtoi(01)
strtoi(01011
)
as.integer(101010)
strsplit(101010101)
strsplit(101010101, split = 0)
strsplit(101010101, split = 1)
class(bbk.bin)
as.numeric(bbk.bin)
bbk.bin
class(bbk.bin)
unlist(strsplit(paste(bbk.bin, collapse = ""), split=""))
as.numeric(unlist(strsplit(paste(bbk.bin, collapse = ""), split="")))
library(compositions)
bbk.bin <- binary(bbk.ratio * 100)
bbk.sample <- as.numeric(unlist(strsplit(paste(bbk.bin, collapse = ""), split="")))
head(bbk.sample)
bbk.bin.plusminus1 <- (bbk.sample - .5)*2
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
plot(seq(from=-3,to=3,by=.05),erfc(seq(from=-3,to=3,by=.05)),type="l",xlab="x",ylab="erfc(x")
erfc(abs(sum(bbk.bin.plusminus1)/sqrt(2*nFlips)))
plot(erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=50),1,sum))/sqrt(2*50)),ylab="P-values of 20 runs")
sum(erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=50),1,sum))/sqrt(2*50))<=.01)
erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=50),1,sum))/sqrt(2*50))
erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50)
)
erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=28),1,sum))/sqrt(2*28))
erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=28),1,sum))/sqrt(2*28))
plot(erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=28),1,sum))/sqrt(2*28)),ylab="P-values of 32 runs")
sum(erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=28),1,sum))/sqrt(2*28))<=.01)
matrix(dataFromRandom.plusminus1,ncol=50)
(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum)
)
abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))
(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50))
erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50))
erfc(abs(apply(matrix(dataFromRandom.plusminus1,ncol=50),1,sum))/sqrt(2*50))<=.01
plot(erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=28),1,sum))/sqrt(2*250)),ylab="P-values of 32 runs")
sum(erfc(abs(apply(matrix(bbk.bin.plusminus1,ncol=28),1,sum))/sqrt(2*50))<=.01)
