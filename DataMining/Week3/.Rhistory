attributes(results.2)
attributes(results.2)
results.2$npar
Table(results.2$predclass)
results.2$posterior
head(GC.inputs)
summary(GC.inputs)
set.seed(555)
train_ind <- sample(seq_len(nrow(scaled_attributes)), size = 700)
train_data <- scaled_attributes[train_ind, ]
train_data <- scaled_attributes[train_ind, ]
test_data<- scaled_attributes[-train_ind, ]
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
train_data <- GC.inputs[train_ind, ]
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
train_data <- GC.inputs[train_ind, ]
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_data,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
Payment.Status.of.Previous.Credit+1
x=GC.inputs[,Payment.Status.of.Previous.Credit + 1]
f1 = cbind(Payment.Status.of.Previous.Credit=Payment.Status.of.Previous.Credit+1, Purpose=Purpose+1, Value.Savings.Stocks+Value.Savings.Stocks+1, Guarantors=Guarantors+1,Concurrent.Credits=Concurrent.Credits+1)~1
results.2 <- poLCA(f1,train_data,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.2 <- poLCA((Payment.Status.of.Previous.Credit=Payment.Status.of.Previous.Credit+1, Purpose=Purpose+1, Value.Savings.Stocks+Value.Savings.Stocks+1, Guarantors=Guarantors+1,Concurrent.Credits=Concurrent.Credits+1)~1,train_data,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
head(GC.inputs )
GC.alt <- GC.inputs +1
head(GC.alt)
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Assignment1/german_credit.csv", header=TRUE, sep=",")
colnames(germanCredit)
#load poLCA
library(poLCA)
# Remove the output variable(Creditibility)
#germanCredit$Creditability <- NULL
#colnames(germanCredit)
# select only the chosen variables
GC.inputs<- germanCredit[, c(4,5,7,11,15)]
colnames(GC.inputs)
summary(GC.inputs)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
# separate into two data frames: train and test
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
train_alt <- train_data +1
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA((Payment.Status.of.Previous.Credit=Payment.Status.of.Previous.Credit+1, Purpose=Purpose+1, Value.Savings.Stocks+Value.Savings.Stocks+1, Guarantors=Guarantors+1,Concurrent.Credits=Concurrent.Credits+1)~1,train_data,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Assignment1/german_credit.csv", header=TRUE, sep=",")
colnames(germanCredit)
#load poLCA
library(poLCA)
# Remove the output variable(Creditibility)
#germanCredit$Creditability <- NULL
#colnames(germanCredit)
# select only the chosen variables
GC.inputs<- germanCredit[, c(4,5,7,11,15)]
colnames(GC.inputs)
summary(GC.inputs)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
# separate into two data frames: train and test
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
train_alt <- train_data +1
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.2)
results.2$npar
Table(results.2$predclass)
table(results.2$predclass)
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Assignment1/german_credit.csv", header=TRUE, sep=",")
colnames(germanCredit)
#load poLCA
library(poLCA)
# Remove the output variable(Creditibility)
#germanCredit$Creditability <- NULL
#colnames(germanCredit)
# select only the chosen variables
GC.inputs<- germanCredit[, c(4,5,7,11,15)]
colnames(GC.inputs)
summary(GC.inputs)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
# separate into two data frames: train and test
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
train_alt <- train_data +1
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.2)
results.2$npar
table(results.2$predclass)
results.2$posterior
AIC(results.2)
BIC(results.3)
AIC(results.2)
results.2$aic
results.3$aic
results.4$aic
results.5$aic
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Assignment1/german_credit.csv", header=TRUE, sep=",")
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
colnames(germanCredit)
#load poLCA
library(poLCA)
# Remove the output variable(Creditibility)
#germanCredit$Creditability <- NULL
#colnames(germanCredit)
# select only the chosen variables
GC.inputs<- germanCredit[, c(4,5,7,11,15)]
colnames(GC.inputs)
summary(GC.inputs)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
# separate into two data frames: train and test
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
train_alt <- train_data +1
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.2)
results.2$npar
table(results.2$predclass)
results.2$posterior
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.2)
results.2$npar
table(results.2$predclass)
results.2$posterior
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
colnames(germanCredit)
#load poLCA
library(poLCA)
# select only the chosen variables
GC.inputs<- germanCredit[, c(4,5,7,11,15)]
colnames(GC.inputs)
#summary(GC.inputs)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
# separate into two data frames: train and test
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
train_alt <- train_data +1
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
#colnames(germanCredit)
#load poLCA
library(poLCA)
# select only the chosen variables
GC.inputs<- germanCredit[, c(4,5,7,11,15)]
colnames(GC.inputs)
#summary(GC.inputs)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
# separate into two data frames: train and test
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
train_alt <- train_data +1
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.2)
results.2$npar
table(results.2$predclass)
#results.2$posterior
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.3)
results.3$npar
table(results.3$predclass)
#results.3$posterior
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
results.3$probs.start
test_alt <- test_data +1
head(test_alt)
results.2 <- poLCA(f1,test_alt,nclass=2,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
results.3 <- poLCA(f1,test_alt,nclass=3,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
results.4 <- poLCA(f1,test_alt,nclass=4,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
results.5 <- poLCA(f1,test_alt,nclass=5,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=10,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.3)
results.3$npar
table(results.3$predclass)
#results.3$posterior
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
# Perform holdout testing using the centers from training set
results.3$probs.start
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2.ho <- poLCA(f1,test_alt,nclass=2,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
results.3.ho <- poLCA(f1,test_alt,nclass=3,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
results.4.ho <- poLCA(f1,test_alt,nclass=4,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
results.5.ho <- poLCA(f1,test_alt,nclass=5,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs.start)
results.3.ho$npar
table(results.3.ho$predclass)
#results.3.ho$posterior
c(results.2.ho$aic,results.3.ho$aic,results.4.ho$aic,results.5.ho$aic)
#Look at relative class sizes and conditional probabilites
# Perform holdout testing using the centers from training set
results.3$probs.start
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2.ho <- poLCA(f1,test_alt,nclass=2,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
results.3.ho <- poLCA(f1,test_alt,nclass=3,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
results.4.ho <- poLCA(f1,test_alt,nclass=4,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
results.5.ho <- poLCA(f1,test_alt,nclass=5,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
results.3.ho$npar
table(results.3.ho$predclass)
#results.3.ho$posterior
c(results.2.ho$aic,results.3.ho$aic,results.4.ho$aic,results.5.ho$aic)
#Look at relative class sizes and conditional probabilites
results.3.ho$probs
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=1000,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=1000,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=1000,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=1000,tol=.001,verbose=FALSE,graphs=TRUE)
attributes(results.3)
results.3$npar
table(results.3$predclass)
#results.3$posterior
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
# Perform holdout testing using the centers from training set
results.3$probs.start
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.3.ho <- poLCA(f1,test_alt,nclass=3,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
table(results.3.ho$predclass)
#results.3.ho$posterior
c(results.2.ho$aic,results.3.ho$aic,results.4.ho$aic,results.5.ho$aic)
#Look at relative class sizes and conditional probabilites
results.3.ho$probs
# Perform holdout testing using the centers from training set
results.3$probs.start
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.3.ho <- poLCA(f1,test_alt,nclass=3,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
table(results.3.ho$predclass)
#results.3.ho$posterior
c(results.2.ho$aic,results.3.ho$aic,results.4.ho$aic,results.5.ho$aic)
#Look at relative class sizes and conditional probabilites
results.3$probs
results.3.ho$probs
results.3.ho$Chisq
results.3$Chisq
results.3.ho$Chisq
supressWarnings(library(poLCA))
library(poLCA, quietly = TRUE)
#Run LCA
set.seed(555)
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.2 <- poLCA(f1,train_alt,nclass=2,nrep=500,tol=.001,verbose=FALSE,graphs=TRUE)
results.3 <- poLCA(f1,train_alt,nclass=3,nrep=500,tol=.001,verbose=FALSE,graphs=TRUE)
results.4 <- poLCA(f1,train_alt,nclass=4,nrep=500,tol=.001,verbose=FALSE,graphs=TRUE)
results.5 <- poLCA(f1,train_alt,nclass=5,nrep=500,tol=.001,verbose=FALSE,graphs=TRUE)
results.3$npar
table(results.3$predclass)
# Compare the AIC values for each group of clusters
c(results.2$aic,results.3$aic,results.4$aic,results.5$aic)
# Perform holdout testing using the centers from training set
results.3$probs.start
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.3.ho <- poLCA(f1,test_alt,nclass=3,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
table(results.3.ho$predclass)
#Look at relative class sizes and conditional probabilites
results.3$probs
results.3.ho$probs
# Perform holdout testing using the centers from training set
f1 = cbind(Payment.Status.of.Previous.Credit, Purpose, Value.Savings.Stocks, Guarantors,Concurrent.Credits)~1
results.3.ho <- poLCA(f1,test_alt,nclass=3,nrep=1,tol=.001,verbose=FALSE,graphs=TRUE,probs.start=results.3$probs)
table(results.3.ho$predclass)
#Look at relative class sizes and conditional probabilites
results.3$probs
results.3.ho$probs
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
#load poLCA
library(poLCA, quietly = TRUE)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GC.inputs)), size = 700)
# separate into two data frames: train and test
train_data <- GC.inputs[train_ind, ]
test_data<- GC.inputs[-train_ind, ]
head(train_data)
#Load the German data
germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
#load poLCA
library(poLCA, quietly = TRUE)
# select only the chosen variables
GCD<- germanCredit[, c(1:7)]
colnames(GCD)
#summary(GCD)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GCD)), size = 700)
# separate into two data frames: train and test
train_data <- GCD[train_ind, ]
test_data<- GCD[-train_ind, ]
head(train_data)
colnames(GCD)
GCD<- germanCredit[, c(1:8)]
colnames(GCD)
library(caret)
data(germanCredit)
head(germanCredit)
library(caret)
data(germanCredit)
library(caret)
data(GermanCredit)
library(caret)
data(GermanCredit)
head(GermanCredit)
#Load the German data
#germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
library(caret)
data(GermanCredit)
head(GermanCredit)
# select only the chosen variables
GCD<- GermanCredit[, c(1:7)]
colnames(GCD)
#summary(GCD)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GCD)), size = 700)
# separate into two data frames: train and test
train_data <- GCD[train_ind, ]
test_data<- GCD[-train_ind, ]
head(train_data)
colMeans(train_data)
apply(train_data, 2, sd)
scale(train_data)
colMeans(train_scaled)
head(train_scaled)
train_scaled = scale(train_data)
head(train_scaled)
test_scaled = scale(test_data, center=train_means, scale = train_sd)
#Load the German data
#germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
library(caret)
data(GermanCredit)
head(GermanCredit)
# select only the chosen variables
GCD<- GermanCredit[, c(1:7)]
colnames(GCD)
#summary(GCD)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GCD)), size = 700)
# separate into two data frames: train and test
train_data <- GCD[train_ind, ]
test_data<- GCD[-train_ind, ]
head(train_data)
#standardize train_data
train_means = colMeans(train_data)
train_sd = apply(train_data, 2, sd)
train_scaled = scale(train_data)
head(train_scaled)
test_scaled = scale(test_data, center=train_means, scale = train_sd)
#Load the German data
#germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
library(caret)
data(GermanCredit)
head(GermanCredit)
# select only the chosen variables
GCD<- GermanCredit[, c(1:7)]
colnames(GCD)
#summary(GCD)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GCD)), size = 700)
# separate into two data frames: train and test
train_data <- GCD[train_ind, ]
test_data<- GCD[-train_ind, ]
head(train_data)
#standardize train_data
train_means = colMeans(train_data)
train_sd = apply(train_data, 2, sd)
train_scaled = scale(train_data)
head(train_scaled)
test_scaled = scale(test_data, center=train_means, scale = train_sd)
head(test_scaled)
#Load the German data
#germanCredit<- read.csv("C:/Users/JohntheGreat/Documents/MSCA/DataMining/Week1/german_credit.csv", header=TRUE, sep=",")
library(caret)
data(GermanCredit)
head(GermanCredit)
# select only the chosen variables
GCD<- GermanCredit[, c(1:7)]
colnames(GCD)
#summary(GCD)
# need to split the data into train/test portions
set.seed(555)
train_ind <- sample(seq_len(nrow(GCD)), size = 700)
# separate into two data frames: train and test
train_data <- GCD[train_ind, ]
test_data<- GCD[-train_ind, ]
head(train_data)
head(test_data)
#standardize train_data
train_means = colMeans(train_data)
train_sd = apply(train_data, 2, sd)
train_scaled = scale(train_data)
head(train_scaled)
test_scaled = scale(test_data, center=train_means, scale = train_sd)
head(test_scaled)
pr.cr <- princomp(train_scaled)
summary(pr.cr)
attributes(pr.cr)
barplot(pr.cr$sdev^2, ylab= "Variances")
pr.cr <- prcomp(train_scaled)
summary(pr.cr)
attributes(pr.cr)
barplot(pr.cr$sdev^2, ylab= "Variances")
attributes(pr.cr)
pr.cr$x
barplot(pr.cr$sdev^2, ylab= "Variances", type='b')
plot(pr.cr$sdev^2, ylab= "Variances", type='b')
plot(pr.cr$sdev^2, ylab= "Variances", type='b')
summary(pr.cr)
pr.cr
pr.cr[,1]
pr.cr[ ,1]
pr.cr[1 ,1]
pr.cr$1
pr.cr
pr.cr$rotation
pr.cr$rotation[PC1]
pr.cr$rotation[, 1]
plot(x=pr.cr$rotation[, 1], y=pr.cr$rotation[, 2])
plot(x=pr.cr$rotation[, 1], y=pr.cr$rotation[, 2], type='b')
plot(x=pr.cr$rotation[, 1], y=pr.cr$rotation[, 3], type='b')
plot(x=pr.cr$rotation[, 1], y=pr.cr$rotation[, 4], type='b')
pr.cr
round(pr.cr$rotation[, 1],2)
round(pr.cr$rotation,2)
plot(x=pr.cr$rotation[, 1], y=pr.cr$rotation[, 2], type='b')
plot(x=pr.cr$rotation[, 1], y=pr.cr$rotation[, 2])
round(head(pr.cr$x),2)
plot(pr.cr$sdev^2, ylab= "Variances", type='b')
#Variance Explained
pr.var <- pr.cr$sdev ^2
pve <- pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,1), type = "b")
plot(pr.cr$sdev^2, ylab= "Variances", type='b')
#Variance Explained
pr.var <- pr.cr$sdev ^2
pve <- pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,0.4), type = "b")
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,0.3), type = "b")
plot(pr.cr$sdev^2, ylab= "Variances", type='b')
#Variance Explained
pr.var <- pr.cr$sdev ^2
pve <- pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,0.3), type = "b")
plot(cumsum(pve), xlab="Principal Component ", ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,1), type = "b")
plot(x=pr.cr$rotation[, 1], y=pr.cr$rotation[, 2], xlab='PC1 Loadings', ylab='PC2 Loadings', main = 'PC1 v PC2')
